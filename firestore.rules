rules_version = '2';

// Определяем правила для сервиса Cloud Firestore
service cloud.firestore {
  // Правила применяются ко всем коллекциям в вашей базе данных
  match /databases/{database}/documents {

    // --- Правила для коллекции "workspaces" ---
    // {workspaceId} - это "wildcard", переменная, соответствующая ID любого документа
    match /workspaces/{workspaceId} {

      // Функция для проверки, является ли пользователь участником рабочего пространства
      function isMember() {
        // resource.data - это данные документа, к которому обращаются
        // request.auth.uid - это ID текущего аутентифицированного пользователя
        return request.auth.uid in resource.data.members;
      }
      
      // Функция для проверки, является ли пользователь владельцем
      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

      // РАЗРЕШИТЬ ЧТЕНИЕ (get, list)
      // Любой участник может читать информацию о рабочем пространстве
      allow read: if isMember();

      // РАЗРЕШИТЬ СОЗДАНИЕ (create)
      // Любой аутентифицированный пользователь может создать новое рабочее пространство.
      // request.resource.data - это данные, которые ПЫТАЮТСЯ записать.
      // Мы проверяем, что создатель сам себя добавляет в участники и назначает владельцем.
      allow create: if request.auth.uid == request.resource.data.ownerId &&
                       request.auth.uid in request.resource.data.members;

      // РАЗРЕШИТЬ ОБНОВЛЕНИЕ (update)
      // Только владелец может изменять название, описание и список участников
      allow update: if isOwner();
      
      // РАЗРЕШИТЬ УДАЛЕНИЕ (delete)
      // Только владелец может удалить рабочее пространство
      allow delete: if isOwner();


      // --- Правила для ВСЕХ ПОДКОЛЛЕКЦИЙ внутри workspace ---
      // (tasks, finances, calendarEvents, regulations, contacts)
      match /{subcollection}/{documentId} {

        // Функция для проверки, является ли пользователь участником родительского workspace
        function isParentMember() {
          // get() - это мощная функция, которая позволяет прочитать другой документ
          // Мы "поднимаемся" на уровень выше и читаем родительский документ workspace,
          // чтобы проверить, есть ли текущий пользователь в его списке members.
          return request.auth.uid in get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members;
        }

        // РАЗРЕШИТЬ ЧТЕНИЕ и ЗАПИСЬ (создание, обновление, удаление)
        // в любой подколлекции, если пользователь является участником проекта.
        allow read, write: if isParentMember();
      }
    }
  }
}
